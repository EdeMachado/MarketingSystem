generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id          String   @id @default(uuid())
  email       String?
  phone       String?
  name        String
  company     String?
  source      String   // email, whatsapp, instagram, facebook
  status      String   @default("active") // active, unsubscribed, bounced
  tags        String?  // JSON array of tags
  metadata    String?  // JSON for additional info
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Enriquecimento e validação
  emailValid        Boolean?   // resultado da validação
  emailValidatedAt  DateTime?  // quando foi validado
  validationReason  String?    // motivo de inválido/bounce
  whatsappDetected  Boolean?   // se possui WhatsApp ativo
  enrichedAt        DateTime?  // quando dados foram enriquecidos
  optOut            Boolean    @default(false) // LGPD opt-out
  optOutAt          DateTime?  // data do opt-out
  bounceCount       Int        @default(0)

  campaigns   CampaignContact[]

  @@index([email])
  @@index([phone])
  @@index([source])
  @@index([optOut])
}

model Campaign {
  id              String   @id @default(uuid())
  name            String
  description     String?
  company         String   @default("biomed") // biomed, advocacia
  type            String   // email, whatsapp, instagram, facebook
  status          String   @default("draft") // draft, scheduled, running, completed, paused
  template        String   // Template content
  subject         String?  // Subject for email
  scheduledAt     DateTime?
  startedAt       DateTime?
  completedAt     DateTime?
  isRecurring     Boolean  @default(false)
  recurrenceType  String?  // daily, weekly, monthly
  recurrenceValue Int?     // day of week/month
  segmentFilters  String?  // JSON filters for segmentation
  abTestEnabled   Boolean  @default(false)
  abTestVariants  String?  // JSON for A/B test variants
  metadata        String?  // JSON for additional data (mediaUrl, etc)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Budget/ROI
  budgetPlanned   Float?   // orçamento planejado
  budgetSpent     Float?   // gasto realizado
  revenue         Float?   // receita atribuída
  roi             Float?   // calculado: (revenue - budgetSpent) / budgetSpent
  
  contacts    CampaignContact[]
  stats       CampaignStats?
  
  @@index([status])
  @@index([type])
  @@index([company])
  @@index([scheduledAt])
}

model CampaignContact {
  id            String   @id @default(uuid())
  campaignId    String
  contactId     String
  status        String   @default("pending") // pending, sent, delivered, opened, clicked, failed
  sentAt        DateTime?
  deliveredAt   DateTime?
  openedAt      DateTime?
  clickedAt     DateTime?
  clickCount    Int      @default(0)
  openCount     Int      @default(0)
  trackingToken String?  // Unique token for tracking
  error         String?
  metadata      String?  // JSON for tracking (links clicked, etc)
  
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, contactId])
  @@index([status])
  @@index([trackingToken])
}

model CampaignStats {
  id            String   @id @default(uuid())
  campaignId    String   @unique
  total         Int      @default(0)
  sent          Int      @default(0)
  delivered     Int      @default(0)
  opened        Int      @default(0)
  clicked       Int      @default(0)
  failed        Int      @default(0)
  bounceRate    Float    @default(0)
  openRate      Float    @default(0)
  clickRate     Float    @default(0)
  conversionRate Float   @default(0)
  revenue       Float    @default(0)
  updatedAt     DateTime @updatedAt
  
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model EmailTemplate {
  id          String   @id @default(uuid())
  name        String
  subject     String
  body        String   // HTML body
  textBody    String?  // Plain text version
  type        String   @default("email") // email, whatsapp, etc
  variables   String?  // JSON array of available variables
  category    String?  // promotional, newsletter, transactional
  isDefault   Boolean  @default(false)
  preview     String?  // Preview image URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([type])
  @@index([category])
}

model Segment {
  id          String   @id @default(uuid())
  name        String
  description String?
  filters     String   // JSON filters
  contactCount Int     @default(0)
  type        String   @default("dynamic") // dynamic | static
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@index([type])
}

model ClickEvent {
  id            String   @id @default(uuid())
  campaignId    String
  contactId     String
  trackingToken String
  url           String
  clickedAt     DateTime @default(now())
  
  @@index([campaignId])
  @@index([trackingToken])
  @@index([clickedAt])
}

model OpenEvent {
  id            String   @id @default(uuid())
  campaignId    String
  contactId     String
  trackingToken String
  openedAt      DateTime @default(now())
  ipAddress     String?
  userAgent     String?
  
  @@index([campaignId])
  @@index([trackingToken])
  @@index([openedAt])
}

// Cadastro de empresas (preenchido automaticamente pela busca)
model Company {
  id         String   @id @default(uuid())
  name       String
  email      String?
  phone      String?
  whatsapp   String?
  website    String?
  address    String?
  city       String?
  state      String?
  zipCode    String?
  source     String   // google, manual, import, etc
  metadata   String?  // JSON com dados adicionais (types, rating, geometry, placeId)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Enriquecimento e deduplicação
  emailValid        Boolean?
  emailValidatedAt  DateTime?
  whatsappDetected  Boolean?
  enrichedAt        DateTime?
  normalizedName    String?
  normalizedAddress String?

  @@index([name])
  @@index([city])
  @@index([state])
  @@index([website])
  @@index([normalizedName])
}

model Project {
  id          String   @id @default(uuid())
  name        String
  clientName  String?
  description String?
  status      String   @default("active") // active, on_hold, completed, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tasks       Task[]
}

model Task {
  id          String   @id @default(uuid())
  projectId   String?
  title       String
  description String?
  status      String   @default("todo") // todo, doing, review, done
  assignee    String?
  priority    String   @default("medium") // low, medium, high, urgent
  startDate   DateTime?
  dueDate     DateTime?
  estimateH   Float?   // horas estimadas
  spentH      Float?   // horas realizadas
  dependencies String? // JSON array de Task IDs
  tags        String?  // JSON array de tags
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@index([status])
  @@index([assignee])
  @@index([projectId])
  @@index([dueDate])
}

model Asset {
  id          String   @id @default(uuid())
  company     String   @default("biomed") // biomed, advocacia
  name        String
  type        String   // image, video, doc, text
  url         String?
  content     String?  // texto/HTML
  tags        String?  // JSON tags
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([company])
}

model Creative {
  id          String   @id @default(uuid())
  company     String   @default("biomed") // biomed, advocacia
  title       String
  description String?
  channel     String   // email, instagram, facebook, linkedin
  body        String?  // HTML/Texto
  assetIds    String?  // JSON array de Asset IDs
  status      String   @default("draft") // draft, in_review, approved, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  approvals   Approval[]
  
  @@index([company])
}

model Approval {
  id          String   @id @default(uuid())
  creativeId  String?
  advertisementId String?
  reviewer    String
  status      String   @default("pending") // pending, approved, changes_requested, rejected
  comment     String?
  createdAt   DateTime @default(now())
  decidedAt   DateTime?

  creative       Creative?      @relation(fields: [creativeId], references: [id], onDelete: Cascade)
  advertisement  Advertisement? @relation(fields: [advertisementId], references: [id], onDelete: Cascade)

  @@index([creativeId])
  @@index([advertisementId])
}

model Advertisement {
  id          String   @id @default(uuid())
  company     String   @default("biomed") // biomed, advocacia
  
  // Planejamento
  title       String
  serviceId   String?  // ID do serviço do catálogo
  brief       String?  // descrição/brief do anúncio
  objective   String?  // objetivo (conversão, awareness, engagement)
  targetAudience String? // público-alvo
  budget      Float?   // orçamento planejado
  budgetSpent Float?   @default(0)
  
  // Criação
  content     String?  // conteúdo/texto do anúncio
  mediaUrls   String?  // JSON array de URLs de imagens/vídeos
  channels    String?  // JSON array de canais: ["email", "instagram", "facebook", etc]
  channel     String?  // DEPRECATED: manter para compatibilidade, usar channels
  format      String?  // post, story, reel, carousel, etc
  
  // Workflow
  status      String   @default("draft") // draft, planning, creation, review, approved, scheduled, published
  stage       String   @default("planning") // planning, creation, approval, scheduling, publishing
  
  // Aprovação
  needsApproval Boolean @default(true)
  approvedAt   DateTime?
  approvedBy   String?
  
  // Agendamento
  scheduledAt DateTime?
  scheduledChannel String? // canal onde será publicado
  
  // Publicação
  publishedAt DateTime?
  publishedUrl String? // URL do post publicado
  campaignId  String? // ID da campanha gerada (se aplicável)
  
  // Asset library (depois de publicado)
  assetId     String? // ID do asset na biblioteca (quando vira asset)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  approvals   Approval[]
  
  @@index([status])
  @@index([stage])
  @@index([channel])
  @@index([company])
  @@index([scheduledAt])
}

